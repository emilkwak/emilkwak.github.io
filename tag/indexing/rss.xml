<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>emilkwak.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Python, Pandas를 Excel보다 사랑하는 직장인을 위한 블로그 </description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>NumPy(넘파이) PyInstaller 패키징 시 실행파일(exe) 용량이 너무 큰 경우 해결책</title>
	  <link>//numpy-pyinstaller-size-too-big</link>
	  <author></author>
	  <pubDate>2020-04-13T00:00:00+09:00</pubDate>
	  <guid>//numpy-pyinstaller-size-too-big</guid>
	  <description><![CDATA[
	     <p><code class="highlighter-rouge">PyInstaller</code>는 Python 프로그램 배포를 목적으로 많은 분들이 사용하는 패키지입니다. <code class="highlighter-rouge">cx_Freeze</code>나 <code class="highlighter-rouge">py2exe</code> 등 같은 용도의 패키지가 대체재로 존재하지만 사용법이 간단해 더 인기가 있습니다.</p>

<p><code class="highlighter-rouge">NumPy</code>는 Python 사용자라면 한번쯤 사용해 본 패키지일 것입니다. Python이 대중적인 데이터 분석용 언어로 각광받게 만든 패키지 중 하나가 <code class="highlighter-rouge">NumPy</code>라 보아도 무방하지요.(다른 하나는 <code class="highlighter-rouge">pandas</code>라 할 수 있지요.)</p>

<p>Windows 10 환경에서 <code class="highlighter-rouge">NumPy</code>를 사용하는 Python 프로그램을 작성한 후 <code class="highlighter-rouge">PyInstaller</code>로 패키징하면 패키징된 용량이 지나치게 큰 경향이 있어 의아한 분들이 많을 것입니다. <code class="highlighter-rouge">NumPy</code>를 포함해 두세 개 패키지만 <code class="highlighter-rouge">import</code>했는데 용량이 200 ~ 300MB라니, 당혹스럽지 않을 수 없습니다.</p>

<p>혹시, Windows 10에 Ananconda나 Miniconda를 설치해 쓰고 계신 가운데, <code class="highlighter-rouge">NumPy</code> 패키지를 <code class="highlighter-rouge">conda</code>로 설치하지는 않았나요? Anaconda 또는 Miniconda를 쓰는 것은 상관 없지만, <code class="highlighter-rouge">NumPy</code>를 <code class="highlighter-rouge">conda install numpy</code>로 설치한 경우 <code class="highlighter-rouge">PyInstaller</code> 패키징 용량이 매우 커진다는 사실을 발견했습니다. 반면, <code class="highlighter-rouge">pip</code>로 설치하면 적정한 수준의 용량으로 패키징이 가능합니다.</p>

<p>이는 <code class="highlighter-rouge">conda install numpy</code> 시 mkl 계열의 dll 파일이 대거 패키징되기 때문입니다. 한편, 똑같은 <code class="highlighter-rouge">NumPy</code>를 <code class="highlighter-rouge">pip</code>로 설치하면 mkl 계열 dll이 제외되는데 덕분에 용량을 덜 차지하지요. 실제 용량 차이가 어느정도까지 나는지 실험을 통해 알아봤습니다.</p>

<p>실험의 공통적인 시스템 환경은 다음과 같습니다.</p>

<ul>
  <li>Windows 10, 64비트, Anaconda 3 설치</li>
  <li>Python 3.7</li>
  <li>Python 가상환경 <code class="highlighter-rouge">conda create</code>로 생성</li>
  <li><code class="highlighter-rouge">PyInstaller</code>: 3.6</li>
  <li><code class="highlighter-rouge">NumPy</code>
    <ul>
      <li><code class="highlighter-rouge">conda install</code>: 1.18.1</li>
      <li><code class="highlighter-rouge">pip install</code>: 1.18.2</li>
    </ul>
  </li>
</ul>

<h2 id="실험-1-conda-install-numpy-후-pyinstaller-패키징">실험 1: <code class="highlighter-rouge">conda install numpy</code> 후 <code class="highlighter-rouge">PyInstaller</code> 패키징</h2>

<p>우선 Python 3.7 기준의 Python 가상환경을 만들고, <code class="highlighter-rouge">NumPy</code>를 <code class="highlighter-rouge">conda install</code>로 설치합니다. <code class="highlighter-rouge">PyInstaller</code>까지 설치(<code class="highlighter-rouge">pip install</code>로)합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create -n numpy_from_conda python=3.7
conda activate numpy_from_conda
conda install numpy
pip install pyinstaller
</code></pre></div></div>

<p>이제 <code class="highlighter-rouge">NumPy</code>를 쓰는 간단한 Python 프로그램을 작성합니다. 임의의 행렬 두 개를 행렬곱하는 예제입니다. 오로지 <code class="highlighter-rouge">NumPy</code>만 <code class="highlighter-rouge">import</code>해 사용한 간단한 소스코드라고 할 수 있지요. 똑같은 예제를 두 번째 <code class="highlighter-rouge">pip install numpy</code> 실험에도 사용할 예정입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># matmul_example.py</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">mat_a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">mat_b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">mat_a</span><span class="p">,</span> <span class="n">mat_b</span><span class="p">)</span>
</code></pre></div></div>

<p>이제 <code class="highlighter-rouge">PyInstaller</code>로 패키징을 해 보겠습니다. <code class="highlighter-rouge">--onefile</code> 옵션을 적용한 경우와 그렇지 않은 경우, 두 경우를 모두 보겠습니다. 참고로, <code class="highlighter-rouge">numpy_from_conda</code>로 <code class="highlighter-rouge">conda activate</code>된 상태를 유지해야 합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyinstaller --onefile matmul_example.py
dir dist\matmul_example.exe

2020-04-11  오후 ..:..       206,681,582 matmul_example.exe
               1개 파일         206,681,582 바이트
</code></pre></div></div>

<p><code class="highlighter-rouge">--onefile</code> 옵션 없이 패키징하면 어떻게 될까요?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyinstaller --onefile matmul_example.py
dir dist\matmul_example

2020-04-11  오후 ..:..    &lt;DIR&gt;          .
2020-04-11  오후 ..:..    &lt;DIR&gt;          ..
2020-04-11  오후 ..:..         3,554,703 matmul_example.exe
2020-04-11  오후 ..:..             1,037 matmul_example.exe.manifest
2020-04-03  오후 ..:..            19,208 api-ms-win-core-console-l1-1-0.dll
2020-04-03  오후 ..:..            18,696 api-ms-win-core-datetime-l1-1-0.dll
2020-04-03  오후 ..:..            18,696 api-ms-win-core-debug-l1-1-0.dll
.......
2020-04-11  오후 ..:..    &lt;DIR&gt;          mkl
2020-04-06  오전 ..:..        43,504,000 mkl_avx.dll
2020-04-06  오전 ..:..        40,924,032 mkl_avx2.dll
2020-04-06  오전 ..:..        51,629,952 mkl_avx512.dll
.......
2020-04-06  오전 ..:..        71,339,904 mkl_core.dll
2020-04-06  오전 ..:..        35,575,168 mkl_def.dll
2020-04-06  오전 ..:..        32,865,664 mkl_intel_thread.dll
2020-04-06  오전 ..:..        41,196,416 mkl_mc.dll
2020-04-06  오전 ..:..        42,454,400 mkl_mc3.dll
.......
2020-04-06  오전 ..:..        28,328,832 mkl_pgi_thread.dll
2020-04-06  오전 ..:..        15,146,880 mkl_rt.dll
2020-04-06  오전 ..:..         7,586,176 mkl_scalapack_ilp64.dll
2020-04-06  오전 ..:..         7,527,296 mkl_scalapack_lp64.dll
2020-04-06  오전 ..:..        18,359,168 mkl_sequential.dll
2020-04-06  오전 ..:..        20,887,936 mkl_tbb_thread.dll
2020-04-06  오전 ..:..        13,028,224 mkl_vml_avx.dll
2020-04-06  오전 ..:..        12,949,376 mkl_vml_avx2.dll
2020-04-06  오전 ..:..        12,604,800 mkl_vml_avx512.dll
2020-04-06  오전 ..:..         6,645,632 mkl_vml_cmpt.dll
2020-04-06  오전 ..:..         6,877,056 mkl_vml_def.dll
2020-04-06  오전 ..:..        12,032,896 mkl_vml_mc.dll
2020-04-06  오전 ..:..        11,888,512 mkl_vml_mc2.dll
2020-04-06  오전 ..:..        11,977,088 mkl_vml_mc3.dll
...
              91개 파일         565,684,976 바이트
</code></pre></div></div>

<p>요컨대 <code class="highlighter-rouge">--onefile</code> 때는 206MB, <code class="highlighter-rouge">--onefile</code> 아닐 때는 무려 565MB로 패키징됩니다. 행렬곱 하나 하는 장난감 프로그램의 크기가 이정도라는 게 말이 안되지요? mkl 계열 dll들이 큰 용량의 주범인데 이것들을 어떻게 제외시킬 수 있을까요?</p>

<h2 id="실험-2-pip-install-numpy-후-pyinstaller-패키징">실험 2: <code class="highlighter-rouge">pip install numpy</code> 후 <code class="highlighter-rouge">PyInstaller</code> 패키징</h2>

<p>이번에는 Python 3.7 기준 가상환경을 만들고, <code class="highlighter-rouge">NumPy</code>를 <code class="highlighter-rouge">pip install</code>로 설치합니다. <code class="highlighter-rouge">PyInstaller</code>까지 설치합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create -n numpy_from_pip python=3.7
conda activate numpy_from_pip
pip install numpy pyinstaller
</code></pre></div></div>

<p>첫 번째 실험(<code class="highlighter-rouge">conda install numpy</code>)때의 예제 프로그램을 <code class="highlighter-rouge">PyInstaller</code>로 패키징해 보겠습니다. <code class="highlighter-rouge">numpy_from_pip</code>로 <code class="highlighter-rouge">conda activate</code>된 상태여야 합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyinstaller --onefile matmul_example.py
dir dist\matmul_example.exe

2020-04-11  오후 ..:..        19,334,062 matmul_example.exe
               1개 파일          19,334,062 바이트
</code></pre></div></div>

<p><code class="highlighter-rouge">--onefile</code> 옵션을 적용해 보겠습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyinstaller --onefile matmul_example.py
dir dist\matmul_example

2020-04-11  오후 ..:..    &lt;DIR&gt;          .
2020-04-11  오후 ..:..    &lt;DIR&gt;          ..
2020-04-11  오후 ..:..         3,554,246 matmul_example.exe
2020-04-11  오후 ..:..             1,037 matmul_example.exe.manifest
2020-04-03  오후 ..:..            19,208 api-ms-win-core-console-l1-1-0.dll
2020-04-03  오후 ..:..            18,696 api-ms-win-core-datetime-l1-1-0.dll
2020-04-03  오후 ..:..            18,696 api-ms-win-core-debug-l1-1-0.dll
...
              59개 파일          49,431,319 바이트
</code></pre></div></div>

<p><code class="highlighter-rouge">--onefile</code> 때는 19MB, <code class="highlighter-rouge">--onefile</code> 아닐 때는 49MB로 패키징됩니다. 뭔가 딱 예상했던, 적정해 보이는 크기이죠? mkl 계열 dll이 하나도 생성되지 않았음을 볼 수 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dir dist\matmul_example

파일을 찾을 수 없습니다.
</code></pre></div></div>

<p><code class="highlighter-rouge">PyInstaller</code>를 사용한 Python 프로그램 패키징 배포 시 용량이 과도하게 크다 싶으면 <code class="highlighter-rouge">NumPy</code>가 <code class="highlighter-rouge">conda</code>로 설치되었는지 확인해 보시고 그렇다면 <code class="highlighter-rouge">pip</code>로 재설치해 보시기 바랍니다. 매우 간단한 행렬곱 프로그램을 패키징하는데, <code class="highlighter-rouge">--onefile</code> 기준으로 19MB면 되었을 것이 206MB가 될 뻔 했으니까요.(<code class="highlighter-rouge">--onefile</code> 아닌 경우에는 더 심각합니다. 49MB vs. 565MB이니까요.)</p>

<h2 id="참고자료">참고자료</h2>
<ul>
  <li><a href="https://github.com/pyinstaller/pyinstaller/issues/2270">MKL DLLs cannot be excluded using –exclude-module</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>DataFrame(데이터프레임)에 list(리스트)를 행 추가하기 & ignore_index 관련 TypeError 처리</title>
	  <link>//dataframe-list-row-append-ignore-index</link>
	  <author></author>
	  <pubDate>2020-04-13T00:00:00+09:00</pubDate>
	  <guid>//dataframe-list-row-append-ignore-index</guid>
	  <description><![CDATA[
	     <p>이미 있는 <code class="highlighter-rouge">DataFrame</code>(데이터프레임)에 행(row)으로 추가할 데이터가 <code class="highlighter-rouge">list</code>(리스트)로 주어져 있다면 어떻게 해야 할까요? 데이터 재료부터 준비해 봅시다.</p>

<p>참고로, 편의상 <code class="highlighter-rouge">DataFrame</code>을 출력하기 위해 <code class="highlighter-rouge">tabulate</code> 패키지를 활용한 <code class="highlighter-rouge">print_df()</code>를 정의해 사용하였습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">tabulate</span> <span class="kn">import</span> <span class="n">tabulate</span>

<span class="c"># DataFrame 출력을 위해 tabulate 패키지 활용</span>
<span class="k">def</span> <span class="nf">print_df</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">tabulate</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="s">'keys'</span><span class="p">,</span> <span class="n">tablefmt</span><span class="o">=</span><span class="s">'psql'</span><span class="p">))</span>

<span class="c"># 이미 있던 DataFrame</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s">'abcde'</span><span class="p">))</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+
|    |   a |   b |   c |   d |   e |
|----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 |
|  1 |   5 |   6 |   7 |   8 |   9 |
|  2 |  10 |  11 |  12 |  13 |  14 |
|  3 |  15 |  16 |  17 |  18 |  19 |
|  4 |  20 |  21 |  22 |  23 |  24 |
+----+-----+-----+-----+-----+-----+
'''</span>

<span class="c"># 행으로 추가할 list</span>
<span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="mi">101</span><span class="p">,</span> <span class="mi">102</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">105</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
<span class="s">'''
[101, 102 103, 104, 105]
'''</span>
</code></pre></div></div>

<p>쉬운 생각으로, 다음과 같이 하면 될 것 같지요? 그런데 그렇게 하면 조금 이상한 결과가 나옵니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df2</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df2</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+-----+
|----+-----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 | nan |
|  1 |   5 |   6 |   7 |   8 |   9 | nan |
|  2 |  10 |  11 |  12 |  13 |  14 | nan |
|  3 |  15 |  16 |  17 |  18 |  19 | nan |
|  4 |  20 |  21 |  22 |  23 |  24 | nan |
|  0 | nan | nan | nan | nan | nan | 101 |
|  1 | nan | nan | nan | nan | nan | 102 |
|  2 | nan | nan | nan | nan | nan | 103 |
|  3 | nan | nan | nan | nan | nan | 104 |
|  4 | nan | nan | nan | nan | nan | 105 |
+----+-----+-----+-----+-----+-----+-----+
'''</span>
</code></pre></div></div>

<p>왜 이럴까요? <code class="highlighter-rouge">DataFrame</code>에 <code class="highlighter-rouge">list</code>가 <code class="highlighter-rouge">append()</code>로 주어지면 <code class="highlighter-rouge">pandas</code>는 이를 행이 아닌 열 데이터로 인식하기 때문입니다. 그렇다면 <code class="highlighter-rouge">list</code>를 <code class="highlighter-rouge">Series</code>(시리즈)로 만들어서 해보면 어떨까요?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df3</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
<span class="c"># TypeError: Can only append a Series if ignore_index=True or if the Series has a name</span>
</code></pre></div></div>

<p>잠깐! <code class="highlighter-rouge">TypeError</code>가 발생했군요. <code class="highlighter-rouge">TypeError: Can only append a Series if ignore_index=True or if the Series has a name</code>가 의미하는 것은 무엇일까요? 새로 추가되는 <code class="highlighter-rouge">Series</code>는 행 데이터이기는 하지만 행의 이름으로서의 인덱스(index)가 없는 데이터이기 때문입니다. 인덱스를 명시적으로 부여하거나 ‘아무 인덱스가 부여되도 상관 없으니 무시하라’는 의사를 표시해야 합니다.</p>

<p>인덱스를 명시적으로 주려면 <code class="highlighter-rouge">Series</code>에 <code class="highlighter-rouge">name</code>을 부여해야 합니다. 즉, <code class="highlighter-rouge">DataFrame</code>에 <code class="highlighter-rouge">Series</code>가 <code class="highlighter-rouge">append()</code>될 때 <code class="highlighter-rouge">Series</code>가 갖고 있는 <code class="highlighter-rouge">name</code>이 새로 만들어질 행의 인덱스가 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df4</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df4</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|    |   a |   b |   c |   d |   e |   0 |   1 |   2 |   3 |   4 |
|----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 | nan | nan | nan | nan | nan |
|  1 |   5 |   6 |   7 |   8 |   9 | nan | nan | nan | nan | nan |
|  2 |  10 |  11 |  12 |  13 |  14 | nan | nan | nan | nan | nan |
|  3 |  15 |  16 |  17 |  18 |  19 | nan | nan | nan | nan | nan |
|  4 |  20 |  21 |  22 |  23 |  24 | nan | nan | nan | nan | nan |
| 10 | nan | nan | nan | nan | nan | 101 | 102 | 103 | 104 | 105 |
+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
'''</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">name</code>을 임의로 <code class="highlighter-rouge">10</code>으로 줬더니 기존 <code class="highlighter-rouge">DataFrame</code>의 인덱스와 연결성이 깨지는 결번 현상이 발생했습니다. 다른 방법, 즉, ‘아무 인덱스가 부여되도 상관 없으니 무시하라’는 의사를 표시하는 방법을 쓰면 결번 현상을 막을 수 있습니다. <code class="highlighter-rouge">append()</code>에 <code class="highlighter-rouge">ignore_index=True</code>를 인자로 주면 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df5</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">row</span><span class="p">),</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df5</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|    |   a |   b |   c |   d |   e |   0 |   1 |   2 |   3 |   4 |
|----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 | nan | nan | nan | nan | nan |
|  1 |   5 |   6 |   7 |   8 |   9 | nan | nan | nan | nan | nan |
|  2 |  10 |  11 |  12 |  13 |  14 | nan | nan | nan | nan | nan |
|  3 |  15 |  16 |  17 |  18 |  19 | nan | nan | nan | nan | nan |
|  4 |  20 |  21 |  22 |  23 |  24 | nan | nan | nan | nan | nan |
|  5 | nan | nan | nan | nan | nan | 101 | 102 | 103 | 104 | 105 |
+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
'''</span>
</code></pre></div></div>

<p>인덱스 결번 현상은 없어졌습니다. 자연스럽게 기존 <code class="highlighter-rouge">DataFrame</code>의 최대 인덱스를 1 증가(increment)시켜 새 인덱스로 삼았습니다. 그런데 해결되지 않은 문제가 남았습니다. <code class="highlighter-rouge">DataFrame</code>의 헤더는 a ~ e의 알파벳이었죠? 그런데 새로운 행은 0 ~ 4라는 숫자 헤더를 불필요하게 만들었습니다. 의도한 결과가 아닐 뿐더러, 쓸모 없는 <code class="highlighter-rouge">nan</code> 데이터도 무수히 생겨났지요. 아래처럼, <code class="highlighter-rouge">Series</code>에 인덱스를 설정해 <code class="highlighter-rouge">append()</code>하면 해결이 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df6</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">),</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df6</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+
|    |   a |   b |   c |   d |   e |
|----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 |
|  1 |   5 |   6 |   7 |   8 |   9 |
|  2 |  10 |  11 |  12 |  13 |  14 |
|  3 |  15 |  16 |  17 |  18 |  19 |
|  4 |  20 |  21 |  22 |  23 |  24 |
|  5 | 101 | 102 | 103 | 104 | 105 |
+----+-----+-----+-----+-----+-----+
'''</span>
</code></pre></div></div>

<p>깔끔하게 행 데이터로 삽입이 되었지요? 번외로 아래와 같은 트릭을 쓸 수도 있습니다. 위에서 논의한 방법과는 전혀 다른 방법입니다. 두 가지 방법 중 개인적으로 더 편리한 방법을 사용하면 될 것 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df7</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df7</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span>
<span class="n">print_df</span><span class="p">(</span><span class="n">df7</span><span class="p">)</span>
<span class="s">'''
+----+-----+-----+-----+-----+-----+
|    |   a |   b |   c |   d |   e |
|----+-----+-----+-----+-----+-----|
|  0 |   0 |   1 |   2 |   3 |   4 |
|  1 |   5 |   6 |   7 |   8 |   9 |
|  2 |  10 |  11 |  12 |  13 |  14 |
|  3 |  15 |  16 |  17 |  18 |  19 |
|  4 |  20 |  21 |  22 |  23 |  24 |
|  5 | 101 | 102 | 103 | 104 | 105 |
+----+-----+-----+-----+-----+-----+
'''</span>
</code></pre></div></div>

<p>제대로 된 결과가 역시 잘 나왔습니다. 마지막 방법의 원리를 간단히 설명해 볼까요? 우선 기존 <code class="highlighter-rouge">DataFrame</code>의 마지막 행을 그대로 복제해 덧붙입니다. 덧붙여진 마지막 행에 <code class="highlighter-rouge">list</code>를 할당(assign)합니다. 마지막 행을 복제한 목적은 새로운 <code class="highlighter-rouge">list</code>가 삽입될 공간을 마련해 준 것뿐이지요.</p>

<p>메커니즘은 간단하지만, 앞서 위에서 설명한 방법과 비교할 때 ‘코딩량’은 크게 차이나지는 않습니다. 결국, 각자 스타일에 맞는 방법을 택하면 되겠지요?</p>

	  ]]></description>
	</item>

	<item>
	  <title>데이터프레임(DataFrame) 인덱싱(indexing), 셀렉팅(selecting)한 상태에서 값 수정하기(loc[] 사용)</title>
	  <link>//dataframe-update-after-indexing-selecting</link>
	  <author></author>
	  <pubDate>2020-02-03T08:00:00+09:00</pubDate>
	  <guid>//dataframe-update-after-indexing-selecting</guid>
	  <description><![CDATA[
	     <p><code class="highlighter-rouge">pandas</code>를 사용하다 보면 <code class="highlighter-rouge">DataFrame</code>의 일부 행과 일부 열에 대해서만 부분적으로 수정을 가해야 할 때가 생깁니다. 인덱싱(indexing)과 셀렉팅(selecting)을 통해 수정을 가할 부분을 어떻게든 찾은 다음에, 어떤 방법을 써야 실제적인 수정이 이뤄지는지 알아 보겠습니다.</p>

<p>선 다음과 같은 샘플 데이터셋을 통해 <code class="highlighter-rouge">DataFrame</code>을 만들어 보겠습니다. Forbes가 발표한 2019년 미국 최우수 대학교 순위 자료입니다. 1위부터 10위까지만 추렸고 4개의 헤더(<code class="highlighter-rouge">RANK</code>, <code class="highlighter-rouge">NAME</code>, <code class="highlighter-rouge">STATE</code>, <code class="highlighter-rouge">SALARY</code>)는 각각 순위, 대학교명, 소재주, 평균초봉에 해당합니다.
(참고: <a href="https://www.forbes.com/top-colleges/#53e27aed1987">[Forbes] America’s Top Colleges 2019</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s">'RANK'</span><span class="p">,</span> <span class="s">'NAME'</span><span class="p">,</span> <span class="s">'STATE'</span><span class="p">,</span> <span class="s">'SALARY'</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span>\
<span class="p">[[</span><span class="s">'1'</span><span class="p">,</span> <span class="s">'Harvard University'</span><span class="p">,</span> <span class="s">'Massachusetts'</span><span class="p">,</span> <span class="s">'74800'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'2'</span><span class="p">,</span> <span class="s">'Stanford University'</span><span class="p">,</span> <span class="s">'California'</span><span class="p">,</span> <span class="s">'79000'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'3'</span><span class="p">,</span> <span class="s">'Yale University'</span><span class="p">,</span> <span class="s">'Connecticut'</span><span class="p">,</span> <span class="s">'70300'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'4'</span><span class="p">,</span> <span class="s">'Massachusetts Institute of Technology'</span><span class="p">,</span> <span class="s">'Massachusetts'</span><span class="p">,</span> <span class="s">'86300'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'5'</span><span class="p">,</span> <span class="s">'Princeton University'</span><span class="p">,</span> <span class="s">'New Jersey'</span><span class="p">,</span> <span class="s">'75200'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'6'</span><span class="p">,</span> <span class="s">'University of Pennsylvania'</span><span class="p">,</span> <span class="s">'Pennsylvania'</span><span class="p">,</span> <span class="s">'72800'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'7'</span><span class="p">,</span> <span class="s">'Brown University'</span><span class="p">,</span> <span class="s">'Rhode Island'</span><span class="p">,</span> <span class="s">'68200'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'8'</span><span class="p">,</span> <span class="s">'California Institute of Technology'</span><span class="p">,</span> <span class="s">'California'</span><span class="p">,</span> <span class="s">'84100'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'9'</span><span class="p">,</span> <span class="s">'Duke University'</span><span class="p">,</span> <span class="s">'North Carolina'</span><span class="p">,</span> <span class="s">'71100'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'10'</span><span class="p">,</span> <span class="s">'Dartmouth College'</span><span class="p">,</span> <span class="s">'New Hampshire'</span><span class="p">,</span> <span class="s">'71500'</span><span class="p">]]</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">header</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">SALARY</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">SALARY</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>
<p>위 <code class="highlighter-rouge">df</code> 변수에 완성된 데이터가 들어가 있습니다. 어떻게 생긴 데이터인지 한번 볼까요?</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="s">'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	California	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	California	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">STATE</code>가 캘리포니아(California)인 것만 찾아 그 <code class="highlighter-rouge">STATE</code> CALIFORNIA로 변경해 보겠습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">STATE</span> <span class="o">==</span> <span class="s">'California'</span><span class="p">]</span><span class="o">.</span><span class="n">STATE</span> <span class="o">=</span> <span class="s">'CALIFORNIA'</span>
<span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="s">'''
/usr/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:5208: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  self[name] = value
  
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	California	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	California	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">SettingWithCopyWarning</code>이 발생했고 변경하려 했던 <code class="highlighter-rouge">df</code>의 부분도 바뀌지 않고 그대로 있습니다. 우리가 했던 변경 작업이 <code class="highlighter-rouge">df</code> 원본이 아니라 그것을 복사(copy)한 후 변경 처리한 결과라는 것입니다. 당연히 원본인 <code class="highlighter-rouge">df</code>는 아무런 영향을 받지 않은 것이고요.</p>

<p>그러면 어떻게 해야 할까요? 다음과 같이 <code class="highlighter-rouge">loc[]</code>와 <code class="highlighter-rouge">mask</code>를 이용한 방법이 가장 깔끔합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mask = df.STATE == 'California'
df.loc[mask, 'STATE'] = 'CALIFORNIA'
display(df)
'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	CALIFORNIA	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	CALIFORNIA	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''
</code></pre></div></div>
<p><code class="highlighter-rouge">STATE</code> 열을 보면 california였던 것이 모두 CALIFORNIA로 바뀌었습니다. 마찬가지 방법으로, 조금 더 복잡한 작업을 해 보시죠. 평균초봉이 80000 이상이면 대학교명을 모두 대문자 처리하는 코드를 작성해 보겠습니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mask = df.SALARY &gt; 80000
df.loc[mask, 'NAME'] = df[mask].NAME.str.upper()
display(df)
'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	CALIFORNIA	79000
2	3	Yale University	Connecticut	70300
3	4	MASSACHUSETTS INSTITUTE OF TECHNOLOGY	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	CALIFORNIA INSTITUTE OF TECHNOLOGY	CALIFORNIA	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''
</code></pre></div></div>
<p>평균초봉이 86300인 MIT와 84100인 CALTECH, 두 군데의 학교명이 대문자 처리되었습니다. 세계적인 공과대학 두 곳인데, 역시 대단하군요.</p>

<p><code class="highlighter-rouge">DataFrame</code>을 인덱싱, 셀렉팅할 경우 원래의 <code class="highlighter-rouge">DataFrame</code>이 아닌 그것의 복사본을 생성해 반환하게 됩니다. 따라서 그것에 수정을 가해도 원본이 바뀌지는 않는 것입니다. 한편, <code class="highlighter-rouge">mask</code>와 <code class="highlighter-rouge">loc[]</code>을 이용하면 복사본을 생성하지 않고 원본을 유지하고 수정도 원본에 직접 가할 수 있습니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Python 리스트 인덱싱 & 슬라이싱에 음의 값(마이너스) 사용해 보기</title>
	  <link>//python-list-indexing-slicing-using-minus-integer</link>
	  <author></author>
	  <pubDate>2018-09-27T09:00:00+09:00</pubDate>
	  <guid>//python-list-indexing-slicing-using-minus-integer</guid>
	  <description><![CDATA[
	     <p>Python의 가장 큰 매력 중 하나가 리스트 인덱싱과 슬라이싱(list slicing and slicing)입니다. 각괄호와 콜론을 이용해서 리스트의 원소나 리스트의 일부를 쉽게 취할 수 있지요. C나 Java에서 배열 인덱싱, 슬라이싱했던 것과 비교하면 가독성과 간결성 측면에서 비교가 되지 않습니다.</p>

<p>인덱싱과 슬라이싱 외에도 Python의 리스트 연산(list operation)은 편리하기로 유명합니다. 여기에서는 음의 값(minus integer)을 이용한 리스트 인덱싱, 슬라이싱을 살펴 보겠습니다.</p>

<p>우선 아래와 같이 실험용 리스트를 하나 만들어 보겠습니다. 0부터 9까지 10개의 정수로 채워진 리스트이죠. 리스트 속 각 인덱스 위치에는 인덱스와 동일한 정수 값이 들어 있는 형태입니다. <code class="highlighter-rouge">a[i] = [i]</code>인 형태 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = list(range(10))
print(a) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre></div></div>

<p>이 리스트의 인덱스로 음의 값을 주면 어떻게 될까요? C를 생각하면 <code class="highlighter-rouge">a[0]</code>의 주소값 이전의 메모리 영역을 가리키게 되겠죠. Python에서는 그렇지 않습니다. 음의 값인 -n으로 인덱싱을 하면 뒤에서 n번째 요소를 가리키는 셈이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-1], a[-2]) # 9 8
</code></pre></div></div>

<p>위를 보시면 <code class="highlighter-rouge">a[-1]</code>은 뒤에서 1번째 요소인 9를, <code class="highlighter-rouge">a[-2]</code>는 뒤에서 2번째 요소인 8을 가리키는 사실을 볼 수 있습니다.
이를 응용해 음의 값으로 슬라이싱을 할 수도 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-2:]) # [8, 9]
print(a[:-2]) # [0, 1, 2, 3, 4, 5, 6, 7]
print(a[-3:-1]) # [7, 8]
</code></pre></div></div>

<p>위를 보건대, <code class="highlighter-rouge">a[-2:]</code>는 뒤에서 2번째 요소인 8부터 마지막 요소인 9까지를 슬라이싱하고 <code class="highlighter-rouge">a[:-2]</code>는 처음 요소부터 뒤에서 2번째 요소인 8까지 슬라이싱하되 8은 결과에 포함하지 않습니다. 원래 Python 리스트를 <code class="highlighter-rouge">a[start:stop]</code>과 같이 슬라이싱할 때 <code class="highlighter-rouge">stop</code> 위치에 해당하는 요소는 미포함(exclusive)하지요.</p>

<p>리스트 슬라이싱의 <code class="highlighter-rouge">stride</code>에도 음의 값을 넣을 수 있습니다. <code class="highlighter-rouge">a[start:stop:stride]</code>와 같이 슬라이싱할 때, <code class="highlighter-rouge">stride</code>는 요소를 취하는 빈도를 나타냅니다. <code class="highlighter-rouge">stride</code>가 2라면 하나 건너 하나를 취하겠죠. 아래처럼 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::2]) # [0, 2, 4, 6, 8]
</code></pre></div></div>

<p><code class="highlighter-rouge">stride</code>를 음의 값으로 하면 리스트가 역방향으로 슬라이싱됩니다. 이를 이용해 리스트의 역순 정렬(reverse sorting)도 할 수 있습니다. 아래의 <code class="highlighter-rouge">a[-1:-3:-1]</code>을 같이 보실까요? 뒤에서 1번째 요소인 9부터 뒤에서 3번째 요소인 7까지 슬리이싱하되 7은 결과에 포함하지 않겠지요? 따라서 결과가 <code class="highlighter-rouge">[9, 8]</code>이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::-1]) # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
print(a[-1:-3:-1]) # [9, 8]
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
