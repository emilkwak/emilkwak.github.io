<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>emilkwak.github.io/</title>
   
   <link>https://emilkwak.github.io</link>
   <description>Python, Pandas를 Excel보다 사랑하는 직장인을 위한 블로그 </description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Python 딕셔너리(dict) 키(key)를 변수로 만들기</title>
	  <link>//dict-to-var</link>
	  <author></author>
	  <pubDate>2019-04-15T08:30:00+09:00</pubDate>
	  <guid>//dict-to-var</guid>
	  <description><![CDATA[
	     <p>Python의 딕셔너리(<code class="highlighter-rouge">dict</code>)는 C++나 Java의 그것보다 훨씬 유연하고 사용하기도 편합니다. 딕셔너리가 Python에서 자주 사용되는 이유이기도 하지요. 딕셔너리를 선언하고 정의하는 방법도 매우 간단합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'var_a'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
     <span class="s">'var_b'</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
     <span class="s">'var_c'</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],}</span>
</code></pre></div></div>

<p>이렇게 정의된 딕셔너리의 각 요소는 <code class="highlighter-rouge">d['var_a']</code>와 같이 접근할 수 있지요.</p>

<p>한편, 경우에 따라서 <code class="highlighter-rouge">print(d['var_a'])</code>처럼 사용하는 것보다 <code class="highlighter-rouge">print(var_a)</code>처럼 변수로 만들어 사용하는 것이 편할 때가 있지요. 작업중이던 변수들을 딕셔너리로 묶어 <code class="highlighter-rouge">pickle.dump()</code>했다가 다시 <code class="highlighter-rouge">pickle.load()</code>할 때 등이 대표적인 경우이겠죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'</span><span class="si">%</span><span class="s">s = </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span>
</code></pre></div></div>

<p>위와 같이 하면 딕셔너리의 각 요소를 변수로 만들 수 있습니다. 두 줄짜리 간단한 코드지만 원하는 바를 쉽게 달성하게 해 주죠. 위 코드를 간단히 살펴 봅시다. <code class="highlighter-rouge">d.items()</code>는 딕셔너리를 키(key)와 값(value)의 쌍으로 나열시키고, 이를 <code class="highlighter-rouge">for</code>로 iteration합니다. 각 iteration에서 키를 변수명으로 삼아 변수에 값을 할당하는 구문을 문자열로 만들고 이 문자열을 <code class="highlighter-rouge">exec()</code>에 입력시킵니다. <code class="highlighter-rouge">exec()</code>은 말그대로 주어진 문자열을 Python 구문으로 여겨 실행시키지요.</p>

<p>생각보다 간단하고 짧은 <code class="highlighter-rouge">for</code> 루프만으로 딕셔너리 각 요소의 변수로의 전환이 가능하지요?</p>

	  ]]></description>
	</item>

	<item>
	  <title>numpy의 argmax(), argmin() 그리고 argwhere() - 최대, 최소, 특정 값 찾기</title>
	  <link>//numpy-argmax-argmin-argwhere</link>
	  <author></author>
	  <pubDate>2019-04-13T08:55:00+09:00</pubDate>
	  <guid>//numpy-argmax-argmin-argwhere</guid>
	  <description><![CDATA[
	     <p>학부 저학년 시절 첫 프로그래밍 언어를 접할 때, 정수형 array에서 최대 값의 위치를 찾기 위해 자연스럽게 loop을 사용했습니다. 아래처럼 말이죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="n">maximal</span> <span class="o">=</span> <span class="o">-</span><span class="mi">9999</span>
<span class="k">for</span> <span class="n">ix</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">maximal</span><span class="p">:</span>
        <span class="n">maximal</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">mx</span> <span class="o">=</span> <span class="n">ix</span>
<span class="k">print</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">maximal</span><span class="p">)</span>
</code></pre></div></div>

<p>Python에 익숙해 지면서 max()와 같은 기본 메서드를 손쉽고 자연스럽게 사용하게 되었습니다. 그리고 Python을 매력적으로 만들었던 inline for loop도 자유자재로 쓰게 되면서 아래처럼 컴팩트한 코드를 작성할 수 있게 되었죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="n">maximum</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">([(</span><span class="n">ix</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">ix</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">maximum</span><span class="p">])</span>
</code></pre></div></div>

<p>numpy의 존재를 알게 되면서 큰 충격에 빠지지요. 이산수학 강의에서나 볼법한 수학 기호가 그대로 메서드로 구현되어 있더군요. inline for loop조차 구질구질해 보이게 만든 간결한 코드가 아래처럼 가능합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">argmax</span><span class="p">(),</span> <span class="n">a</span><span class="o">.</span><span class="nb">max</span><span class="p">())</span>
</code></pre></div></div>

<p>numpy의 argmax(), argmin()을 이용해 최대, 최소 값의 위치를 손쉽게 알 수 있습니다. argwhere()를 사용하면 특정 데이터의 위치를 매우 간편히 찾을 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">argmin</span><span class="p">(),</span> <span class="n">a</span><span class="o">.</span><span class="nb">min</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">argwhere</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div></div>

<p>바로 위 코드에서 볼 수 있듯이 argwhere()의 용법은 argmax(), argmin()과 다소 다르니 참고하세요.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Pandas DataFrame(Series)의 문자열 contains(), startswith() 여러 값 적용하는 방법</title>
	  <link>//pandas-contains-multiple</link>
	  <author></author>
	  <pubDate>2019-01-23T08:30:00+09:00</pubDate>
	  <guid>//pandas-contains-multiple</guid>
	  <description><![CDATA[
	     <p>Pandas Series는 강력한 문자열 처리 기능을 갖고 있습니다. <code class="highlighter-rouge">Series.str.contains()</code>는 특정 문자열을 포함하는 요소를 찾아 주고 <code class="highlighter-rouge">Series.str.startswith()</code>, <code class="highlighter-rouge">Series.str.endswith()</code>는 특정 문자열로 시작되거나 끝나는 요소를 찾아 줍니다. Series뿐 아니라 DataFrame의 각 열(column)에 대해서도 앞서 말한 기능을 쓸 수 있습니다. <code class="highlighter-rouge">DataFrame['COL1'].str.contains()</code>처럼 쓰면 되지요. DataFrame에서 각 열은 Series이니 어찌 보면 당연한 얘기입니다.</p>

<p>가끔 작업을 하다 보면 여러 문자열 중 하나라도 포함하는 경우, 또는 여러 문자열 중 하나로라도 시작하는(끝나는) 경우를 따져야 할 경우가 생깁니다. <code class="highlighter-rouge">contains()</code>의 경우 ‘|‘(pipe)로 연결된(OR-ing) 문자열을 인자로 주면 되고, <code class="highlighter-rouge">startswith()</code>, <code class="highlighter-rouge">endswith()</code>의 경우 문자열의 tuple을 인자로 주면 됩니다. 이 방법을 알기 전까지는 <code class="highlighter-rouge">df.COL1.apply(lambda x: any(i in x for i in ['this', 'that']))</code>처럼 복잡한 코드 작성을 했었는데, 진작에 알았다면 이미 짠 많은 코드들이 간결하고 가독성 좋게 남아 있었겠지요.</p>

<p>아래는 <code class="highlighter-rouge">contains()</code>에 ‘|‘로 연결된 문자열을 인자로 준 사례입니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pandas as pd

names = ['jack', 'bob', 'watson', 'jake', 'mike', 'don', 'george', 'natasha', 'jill', 'ann', 'john', 'johnson']
ser = pd.Series(names)

ser[ser.str.contains('oh|son')]
# 2      watson
# 10       john
# 11    johnson
# dtype: object
</code></pre></div></div>

<p>아래는 <code class="highlighter-rouge">startswith()</code>에 문자열의 tuple을 인자로 준 사례입니다. <code class="highlighter-rouge">endswith()</code>에 대해서도 응용이 가능하지요.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ser[ser.str.startswith(('j', 'a',))]
# 0        jack
# 3        jake
# 8        jill
# 9         ann
# 10       john
# 11    johnson
dtype: object
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Jekyll 블로그 사이트맵(sitemap) 설치(플러그인) 방법</title>
	  <link>//jekyll-sitemap-plugin-installation</link>
	  <author></author>
	  <pubDate>2019-01-17T07:30:00+09:00</pubDate>
	  <guid>//jekyll-sitemap-plugin-installation</guid>
	  <description><![CDATA[
	     <p>개인 블로그(홈페이지 등)의 페이지들이 Google 검색에 잘 노출되게 하기 위해 Google Search Console에 사이트맵(sitemap)을 제출해 두면 좋습니다. 바닐라 Jekyll에는 없지만, Jekyll 플러그인을 설치하면 Jekyll 블로그의 사이트맵을 빌드 때마다 자동 생성(xml)할 수 있습니다.</p>

<p>아래와 같이 우선 사이트맵 플러그인을 설치합니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo gem install jekyll-sitemap
</code></pre></div></div>
<p>Gemfile에 플러그인 설치 명령어를 추가해 둡니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano Gemfile

... (파일 하단에 아래와 같이 추가) ...
gem 'jekyll-sitemap'
</code></pre></div></div>
<p>설정 파일 플러그인 부분에 설치된 플러그인을 추가합니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano _config.yml

... (파일 내 plugins 부분을 아래와 같이 편집 - 내용 추가) ...
plugins [..., jekyll-sitemap]
</code></pre></div></div>
<p>이제 Jekyll 빌드를 다시 한 후 서버 구동해 보시지요.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo bundle exec jekyll build --verbose
sudo bundle exec jekyll serve --host 0.0.0.0 --port 7070
</code></pre></div></div>
<p>이제 <code class="highlighter-rouge">your.jekyll.blog.url/sitemap.xml</code>로 사이트맵 접속이 가능합니다. 이 주소를 Google Search Console에 사이트맵으로 제출하세요. 그러면 블로그 포스팅이 늘어날 때 Google이 보다 효율적으로 주소를 긁어 갈 수 있게 됩니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>메모리 덜 쓰고 Pandas DataFrame 병합을 빠르게 하는 방법(여러 개의 용량 큰 파일)</title>
	  <link>//pandas-dataframe-concat-efficiently</link>
	  <author></author>
	  <pubDate>2019-01-15T07:00:00+09:00</pubDate>
	  <guid>//pandas-dataframe-concat-efficiently</guid>
	  <description><![CDATA[
	     <p>여러 개의 Excel 파일(또는 csv, pickle 등)로부터 같은 형태의 DataFrame을 차례로 읽어 들여 하나의 큰 DataFrame으로 합치려 한다고 합시다. 각 Excel 파일의 DataFrame의 컬럼 목록은 모두 같다고 하죠. 실제 사례를 상상해 보면, 날짜별, 시간별 로그 데이터가 파일 형태로 저장되어 있는 경우를 생각해 볼 수 있겠네요.</p>

<p>가장 먼저 떠오르는 방법은 아래처럼 빈 DataFrame을 선언한 후 For Loop으로 각 파일을 읽어 붙이는 형태가 되겠습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 권장하지 않는 사례
import pandas as pd, os

base_dir = 'some/dir/path'

df_accum = pd.DataFrame() # 빈 DataFrame을 만듦.
for fname in os.listdir(base_dir):
    df_temp = pd.read_excel(os.path.join(base_dir, fname))
    df_accum = df_accum.append(df_temp) # 매 Loop에서 취해진 DataFrame을 앞서 정의한 빈 DataFrame에 붙임.
</code></pre></div></div>

<p>그러나 이 방법은 다음의 두 가지 이유에서 좋지 않습니다.</p>

<ol>
  <li>메모리를 많이 씁니다. <code class="highlighter-rouge">df_accum</code>은 점점 몸집이 커져 갑니다. Loop마다 커지는 몸집에 <code class="highlighter-rouge">df_temp</code>를 붙이는 작업은 메모리 사용 차원에서 비효율적입니다.</li>
  <li>속도가 느립니다. 크기가 큰 DataFrame을 <code class="highlighter-rouge">append()</code>하는 것보다 작은 것을 하는 게 더 빠를 것입니다. 그런 차원에서 몸집이 커져 가는 <code class="highlighter-rouge">df_accum</code>은 느린 속도의 주범입니다.</li>
</ol>

<p>실제로 pickle 기준으로 총 크기가 4.5GB인 데이터를 위와 같이 처리해 보면 속도가 매우 느린데다가 자칫하면 메모리 부족 오류(MemoryError)를 보게 되기도 합니다.(Windows 64-bit에 8GB RAM을 사용한다 하더라도 말이죠.)</p>

<p>메모리 효율성 차원에서는 사실 뾰족한 답이 없습니다. 다만, ‘조금이라도 메모리를 덜 낭비’하면서 속도는 훨씬 빨리 할 수 있는 방법이 있습니다. 아래처럼 For Loop에서 등장하는 DataFrame을 list에 담아 두고 마지막에 list 통째로 <code class="highlighter-rouge">pd.concat()</code>에 넣어 병합하는 방법입니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 권장하는 사례
import pandas as pd, os

base_dir = 'some/dir/path'

list_of_df = [] # 빈 list를 만듦.
for fname in os.listdir(base_dir):
    df_temp = pd.read_excel(os.path.join(base_dir, fname))
    list_of_df.append(df_temp) # 매 Loop에서 취해진 DataFrame을 위의 list에 적재함.
df_accum = pd.concat(list_of_df) # list 속 DataFrame들을 일괄 병합함.
</code></pre></div></div>

<p>말씀드린 것처럼 메모리 효율성을 급격하게 높일 수는 없겠지만, 속도 향상은 확실히 느낄 수 있을 것입니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Python 리스트 인덱싱 & 슬라이싱에 음의 값(마이너스) 사용해 보기</title>
	  <link>//python-list-indexing-slicing-using-minus-integer</link>
	  <author></author>
	  <pubDate>2018-09-27T09:00:00+09:00</pubDate>
	  <guid>//python-list-indexing-slicing-using-minus-integer</guid>
	  <description><![CDATA[
	     <p>Python의 가장 큰 매력 중 하나가 리스트 인덱싱과 슬라이싱(list slicing and slicing)입니다. 각괄호와 콜론을 이용해서 리스트의 원소나 리스트의 일부를 쉽게 취할 수 있지요. C나 Java에서 배열 인덱싱, 슬라이싱했던 것과 비교하면 가독성과 간결성 측면에서 비교가 되지 않습니다.</p>

<p>인덱싱과 슬라이싱 외에도 Python의 리스트 연산(list operation)은 편리하기로 유명합니다. 여기에서는 음의 값(minus integer)을 이용한 리스트 인덱싱, 슬라이싱을 살펴 보겠습니다.</p>

<p>우선 아래와 같이 실험용 리스트를 하나 만들어 보겠습니다. 0부터 9까지 10개의 정수로 채워진 리스트이죠. 리스트 속 각 인덱스 위치에는 인덱스와 동일한 정수 값이 들어 있는 형태입니다. <code class="highlighter-rouge">a[i] = [i]</code>인 형태 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = list(range(10))
print(a) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre></div></div>

<p>이 리스트의 인덱스로 음의 값을 주면 어떻게 될까요? C를 생각하면 <code class="highlighter-rouge">a[0]</code>의 주소값 이전의 메모리 영역을 가리키게 되겠죠. Python에서는 그렇지 않습니다. 음의 값인 -n으로 인덱싱을 하면 뒤에서 n번째 요소를 가리키는 셈이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-1], a[-2]) # 9 8
</code></pre></div></div>

<p>위를 보시면 <code class="highlighter-rouge">a[-1]</code>은 뒤에서 1번째 요소인 9를, <code class="highlighter-rouge">a[-2]</code>는 뒤에서 2번째 요소인 8을 가리키는 사실을 볼 수 있습니다.
이를 응용해 음의 값으로 슬라이싱을 할 수도 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-2:]) # [8, 9]
print(a[:-2]) # [0, 1, 2, 3, 4, 5, 6, 7]
print(a[-3:-1]) # [7, 8]
</code></pre></div></div>

<p>위를 보건대, <code class="highlighter-rouge">a[-2:]</code>는 뒤에서 2번째 요소인 8부터 마지막 요소인 9까지를 슬라이싱하고 <code class="highlighter-rouge">a[:-2]</code>는 처음 요소부터 뒤에서 2번째 요소인 8까지 슬라이싱하되 8은 결과에 포함하지 않습니다. 원래 Python 리스트를 <code class="highlighter-rouge">a[start:stop]</code>과 같이 슬라이싱할 때 <code class="highlighter-rouge">stop</code> 위치에 해당하는 요소는 미포함(exclusive)하지요.</p>

<p>리스트 슬라이싱의 <code class="highlighter-rouge">stride</code>에도 음의 값을 넣을 수 있습니다. <code class="highlighter-rouge">a[start:stop:stride]</code>와 같이 슬라이싱할 때, <code class="highlighter-rouge">stride</code>는 요소를 취하는 빈도를 나타냅니다. <code class="highlighter-rouge">stride</code>가 2라면 하나 건너 하나를 취하겠죠. 아래처럼 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::2]) # [0, 2, 4, 6, 8]
</code></pre></div></div>

<p><code class="highlighter-rouge">stride</code>를 음의 값으로 하면 리스트가 역방향으로 슬라이싱됩니다. 이를 이용해 리스트의 역순 정렬(reverse sorting)도 할 수 있습니다. 아래의 <code class="highlighter-rouge">a[-1:-3:-1]</code>을 같이 보실까요? 뒤에서 1번째 요소인 9부터 뒤에서 3번째 요소인 7까지 슬리이싱하되 7은 결과에 포함하지 않겠지요? 따라서 결과가 <code class="highlighter-rouge">[9, 8]</code>이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::-1]) # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
print(a[-1:-3:-1]) # [9, 8]
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Windows CLI로 구동한 웹 서버 멈춤 현상 해결 - 빠른 편집 모드 해제</title>
	  <link>//making-windows-web-server-not-stopping</link>
	  <author></author>
	  <pubDate>2018-09-21T09:00:00+09:00</pubDate>
	  <guid>//making-windows-web-server-not-stopping</guid>
	  <description><![CDATA[
	     <p>Windows OS에서 웹 서버를 구동해야 할 일이 종종 있습니다. Microsoft IIS가 Windows의 대표적인 웹 서버 소프트웨어인데 Windows Server OS를 꼭 써야 할 상황이 아니고선 흔히 쓰이지 않지요. Apache가 가장 보편적으로 널리 쓰이는 웹 서버 소프트웨어가 아닐까 합니다. Windows에서도 WAMP를 통해 MySQL(MariaDB), PHP까지 통합하여 간편하게 설치해 사용하라 수 있습니다.</p>

<p>Apache는 아무래도 무겁습니다. 요즘 핫한 Python과도 궁합이 아주 맞지는 않는 편이지요. Apache의 아성은 여전히 건재하지만 ‘그렇게나 제대로된 웹 서버가 아니더라도 성능은 적당하고 간편한 게 좋다’면 Apache 외에도 다른 선택지들이 많습니다.</p>

<p>Python 사용자들에게 가장 친숙한 웹 프레임워크는 Django와 Flask입니다. 아직 Python 기반의 웹 서버를 이야기하고 있지 않습니다. Python 기반 웹 프레임워크에 관해 이야기하고 있습니다. Maximal한 기능을 제공하는 Django와 Minimalism을 추구하는 Flask, 둘 다 매력이 있는 웹 프레임워크이지요.</p>

<p>Django와 Flask는 모두 웹 서버는 아니지만 개발용 간이 서버 기능을 포함하고 있기는 합니다. 프로덕션 차원에서는 쓰지 않기를 권장하고 있지만 서비스 트래픽이 과대하지 않다면 또는 접속량이 많지 않다면 임시적으로 프로덕션에 활용할 수도 있습니다. 좀 더 안정적인 웹 서비스를 위해서는 제대로 된 웹 서버 소프트웨어를 써야 하겠지요. Django, Flask와 궁합이 잘 맞는 웹 서버가 물론 있습니다.</p>

<p>대표적인 Python 기반의 웹 서버로 Gunicorn, Waitress 등이 있습니다. Django, Flask와 같이 WSGI 사양을 준수하는 웹 프레임워크는 WSGI 사양을 준수하는 웹 서버와 최적의 호환성을 자랑합니다. Gunicorn과 Waitress는 WSGI 웹 서버이고 Django, Flask는 WSGI 웹 프레임워크이지요. 이들 간에 최고의 궁합을 볼 수 있습니다.</p>

<p>저는 Waitress를 좋아하는데 Linux뿐 아니라 Windows에서도 잘 구동되기 때문입니다. Gunicorn이 사실 더 유명하긴 하지만 UNIX/Linux 전용이라 Windows에서는 사용하기 힘들죠. 이런 차원에서 Waitress는 Python의 가장 큰 장점인 크로스 플랫폼 지원이 더 빛을 발하게 해 줍니다.</p>

<p>서론이 좀 길었습니다만, Django 또는 Flask의 개발용 간이 서버를 이용하든, Gunicorn이나 Waitress 등의 웹 서버를 이용하든, Windows에서 서버 구동을 하기 위해서는 종종 CLI(DOS 창 또는 cmd라고 부르는)를 이용해야 할 상황이 많습니다. 다음과 같은 Python 파일을 CLI에서 실행하게 되겠죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 파일명: server.py
from waitress import serve
serve(wsgiapp, host='0.0.0.0', port=8080) # wsgiapp: WSGI 사양을 준수한 웹 어플리케이션이라 가정
</code></pre></div></div>

<p>Windows CLI에서 <code class="highlighter-rouge">python server.py</code>와 같이 위 Python 파일을 구동합니다. 웹 서버 프로세스가 생성되어 실행되고 Busy Running하게 되겠죠. 명령이 종료되지 않고 Listening 모드로 유지된 채 커서만 깜빡거리고 있겠지요. 당연한 상황입니다. 쉬운 말로 설명하려는 시도가 오히려 어색할 따름입니다.</p>

<p>그런데 그런 경험 없나요? CLI 창(DOS 창)은 Listening 모드로 열러 있고 컴퓨터도 정상적으로 켜져 있으며 웹 서버 구동 직후 접속이 잘 됐었는데, 두어 시간 후 다시 접속하려면 접속되지 않는 현상을 겪은 적이 있나요? 원인을 찾을 수 없어 리부팅까지 해 봤는데도 여전히 반복되지요.</p>

<p>혹시나 해서 CLI 창(Busy Running 중인)에 엔터 키를 입력해 보니, 접속 안될 때 서버로 들어 왔던 트래픽들이 버퍼링되어 있다가 한꺼번에 밀려 들어와 당황했던 적이 있나요? 몇 시간에 한 번씩 CLI 창에 엔터 키를 반복해서 눌러 줘야 하는 건가, 정녕 다른 방법은 없는 것인가 고민도 많이 했습니다.</p>

<p>Linux Shell에 똑같이 하면 이런 문제가 없는데 왜 Windows에서만 문제일까 궁금합니다. 사실 명확한 원인은 모르겠습니다. 추측건대 CLI가 사용자 입력을 받기 위해 대기하는 가운데 키보드 입출력을 버퍼링하는 기능이 있어서 그것이 웹 서버의 출력까지 버퍼링 처리하고, 그 과정에서 무언가 꼬여서 먹통이 되는 게 아닐까 합니다. 이때 사용자로부터 엔터 키 입력이 들어오자 버퍼가 비워지고 먿었던 서버가 작동하게 되는 것이고요.</p>

<p>원인은 잘 모르지만 어쨌든 해결책이 있어 소개드리겠습니다. Windows CLI 창이 열려 있다는 가정 하에(<code class="highlighter-rouge">Win+R</code> 후 <code class="highlighter-rouge">cmd</code> 실행) 다음과 같이 해 보시지요.</p>

<ul>
  <li>Windows CLI 창의 타이틀 바 위에서 우클릭</li>
  <li>컨텍스트 메뉴에서 ‘속성(P)’ 선택</li>
  <li>‘편집 옵션’의 ‘빠른 편집 모드(Q)’ 체크박스 해제</li>
</ul>

<p>이와 같이 처리한 후 CLI로 웹 서버를 구동하면 입출력 버퍼링이 원인으로 추측되는 웹 서버 멈춤 현상이 발생하지 않게 됩니다. 사실 이 글의 목적은 이 방법을 알려 드리기 위함입니다. 결론에 앞서 서론이 너무 길었는데요, 서론 없이 바로 방법을 설명했다면 어떤 상황에 대한 공감이 잘 되지 않았을 것 같습니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Jekyll 정적 웹사이트 Github Pages에 호스팅하기</title>
	  <link>//jekyll-github-pages</link>
	  <author></author>
	  <pubDate>2018-09-15T09:00:00+09:00</pubDate>
	  <guid>//jekyll-github-pages</guid>
	  <description><![CDATA[
	     <ul>
  <li>설치 환경: Ubuntu(Linux)</li>
  <li>Ruby 개발환경 설치
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install ruby-dev
gem install jekyll bundler
</code></pre></div>    </div>
  </li>
  <li>Jekyll 테마 복제(clone)받기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/jekyller/jasper.git
</code></pre></div>    </div>
    <ul>
      <li>이 경우 <code class="highlighter-rouge">jasper</code>라는 디렉토리가 생겨 그 곳에 소스와 파일들이 내려받아짐.</li>
      <li>Jekyll 테마는 <a href="https://jekyllthemes.io/">jekyllthemes.io</a>와 같은 곳에서 찾아 내려받거나 Github에서 복제받을 수 있음.</li>
    </ul>
  </li>
  <li>의존성 있는 Ruby 라이브러리 일괄 설치하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd jasper
sudo bundle install
</code></pre></div>    </div>
    <ul>
      <li>복제받은 테마의 <code class="highlighter-rouge">Gemfile.lock</code> 파일을 참조해 의존성 있는 모든 Ruby 라이브러리를 일괄 설치함.</li>
    </ul>
  </li>
  <li>Jekyll 서버 로컬로 구동하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd jasper
sudo nano _config.yml
sudo bundle exec jekyll serve
sudo bundle exec jekyll serve --host 0.0.0.0 --port 7070
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">_config.yml</code>의 baseurl을 다음과 같이 변경(이렇게 해야 테마 assets(이미지, 레이아웃 등)가 적용되지 않거나 깨져 적용되는 현상을 없앨 수 있음.)
        <blockquote>
          <p>(변경 전) baseurl: /some/path/
(변경 후) baseurl: /</p>
        </blockquote>
      </li>
      <li><code class="highlighter-rouge">jekyll serve</code>를 <code class="highlighter-rouge">bundle</code>과 함께 실행하는 이유: <code class="highlighter-rouge">bundle install</code>로 설치한 루비 라이브러리들이 적용되는 환경에서 실행하기 위함.</li>
      <li><code class="highlighter-rouge">--host</code>, <code class="highlighter-rouge">--port</code>: Jekyll 서버를 구동할 IP 주소와 포트를 명시함. 별도 명시하지 않을 경우 localhost:4000으로 구동함.</li>
      <li><code class="highlighter-rouge">--host 0.0.0.0</code>: 모든 IP 주소 허용 - 외부 공개를 위한 설정</li>
    </ul>
  </li>
  <li>(참고) 서버 실행 없이 Jekyll 빌드만 하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo bundle exec jekyll build --verbose
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">jekyll serve</code>를 하면 자동으로 빌드까지 한 후 서버를 구동함.</li>
      <li><code class="highlighter-rouge">jekyll build</code>는 서버 구동 없이 빌드만 시킴.</li>
      <li><code class="highlighter-rouge">--verbose</code>: 빌드 과정(빌드 대상, 결과) 로그를 표시하면서 빌드함.</li>
    </ul>
  </li>
  <li>(참고) 미래 일자 포스트 빌드하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo bundle exec jekyll build --future
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">--future</code>: 원래는 미래 일자 포스트 빌드가 불가하나 <code class="highlighter-rouge">--future</code> 부여 시 가능함.</li>
    </ul>
  </li>
  <li>(참고) 특정 포트가 이미 점유된 경우, 점유한 프로세스 강제 종료하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo lsof -i :7070
sudo kill 582
</code></pre></div>    </div>
    <ul>
      <li>7070 포트를 점유하고 있는 프로세스의 ID인 582를 확인해 <code class="highlighter-rouge">kill</code>함.</li>
    </ul>
  </li>
  <li>나의 Github Pages로 배포하기 위한 준비
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote -v
git remote set-url origin https://github.com/emilkwak/emilkwak.github.io
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">git remote -v</code>를 보면, 현재 복제받은 Github 주소를 그대로 origin으로 갖고 있음을 확인할 수 있음. 이대로 둔 채 <code class="highlighter-rouge">git push</code>하게 되면 ‘남의 repository’로 배포하는 의도치 않은(?) 시도를 하게 됨.</li>
      <li><code class="highlighter-rouge">git remote set-url</code>을 통해 origin이 나의 Github Pages용 repository를 향하도록 함.</li>
      <li>이 경우 emilkwak.github.io라는 repository가 나의 Github에 이미 생성되어 있음을 전제로 함.</li>
    </ul>
  </li>
  <li>(참고) origin을 유지한 채 origin2를 새로 만들어 사용하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add orign2 https://github.com/emilkwak/emilkwak.github.io
</code></pre></div>    </div>
  </li>
  <li>나의 Github Pages로 동기화하기
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
git commit -m "something to say"
git push origin master
git push -f origin master
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">git push -f</code>: <code class="highlighter-rouge">git pull</code>을 통한 동기화 없이 강제로 배포(overwrite)하게 함.</li>
    </ul>
  </li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
