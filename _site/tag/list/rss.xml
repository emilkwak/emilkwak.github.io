<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>emilkwak.github.io/</title>
   
   <link>https://emilkwak.github.io</link>
   <description>Python, Pandas를 Excel보다 사랑하는 직장인을 위한 블로그 </description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Python 2차원 리스트(list)의 특정 열(column) 골라 취하기</title>
	  <link>//python-2d-list-certain-column</link>
	  <author></author>
	  <pubDate>2019-04-20T21:30:00+09:00</pubDate>
	  <guid>//python-2d-list-certain-column</guid>
	  <description><![CDATA[
	     <p>C나 C++에서 2차원 배열(2-dimension array) 개념을 많이 사용합니다. 배열을 요소(element)로 하는 배열로 표현을 하지요. Python에서도 리스트(list)를 2차원으로 사용하여 2차원 배열과 동일한 효과를 낼 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="p">]</span>
</code></pre></div></div>

<p>2차원 리스트의 특정 열(column)을 취해 처리해야 할 경우에는 어떻게 해야 할까요? Python의 기본 문법을 이용한 가장 C/C++적인 방법은 루프(loop)를 돌면서 처리하는 것이겠지요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
    <span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c"># [0, 2, 4, 6, 8]</span>
</code></pre></div></div>

<p>Python답게 inline for loop를 사용해 봅시다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c"># [0, 2, 4, 6, 8]</span>
</code></pre></div></div>

<p>zip을 이용한 방법도 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c"># (0, 2, 4, 6, 8)</span>
</code></pre></div></div>

<p>Python 기본 문법을 넘어서 numpy나 pandas 등 라이브러리를 사용하면 훨씬 우아한 코드가 가능합니다. 아래는 numpy를 사용한 방법입니다. numpy의 array로 전환한 후 전치(transpose)시킨 후 인덱싱하는 순서입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c"># [0 2 4 6 8]</span>
</code></pre></div></div>

<p>위의 numpy 코드를 보면 매우 수학적인 느낌이 들지요? 2차원 리스트를 행렬로 인식한 후 전치행렬로 바꾼 다음 행 번호로 접근하는 과정이지요. 아래와 같이 pandas를 이용한 방법도 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">to_list</span><span class="p">())</span>
<span class="c"># [0, 2, 4, 6, 8]</span>
</code></pre></div></div>

<p>pandas에 익숙한 분은 아시겠지만 pandas는 Excel 같은 스프레드시트 관점으로 접근합니다. 위 코드로는 정확히 느낌이 오지 않을 수 있지만, 2차원 리스트를 스프레드시트라 볼 수 있는 데이터프레임으로 바꾼 후 0열을 취하는 과정입니다.</p>

<p>Python 2차원 리스트의 특정 열만 골라서 선택적으로 취하는 방법을 알아 봤습니다. C/C++식 루프 돌리는 방법, inline for loop 이용한 방법, zip 이용한 방법, numpy나 pandas를 통한 방법이 있었습니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Python 리스트 인덱싱 & 슬라이싱에 음의 값(마이너스) 사용해 보기</title>
	  <link>//python-list-indexing-slicing-using-minus-integer</link>
	  <author></author>
	  <pubDate>2018-09-27T09:00:00+09:00</pubDate>
	  <guid>//python-list-indexing-slicing-using-minus-integer</guid>
	  <description><![CDATA[
	     <p>Python의 가장 큰 매력 중 하나가 리스트 인덱싱과 슬라이싱(list slicing and slicing)입니다. 각괄호와 콜론을 이용해서 리스트의 원소나 리스트의 일부를 쉽게 취할 수 있지요. C나 Java에서 배열 인덱싱, 슬라이싱했던 것과 비교하면 가독성과 간결성 측면에서 비교가 되지 않습니다.</p>

<p>인덱싱과 슬라이싱 외에도 Python의 리스트 연산(list operation)은 편리하기로 유명합니다. 여기에서는 음의 값(minus integer)을 이용한 리스트 인덱싱, 슬라이싱을 살펴 보겠습니다.</p>

<p>우선 아래와 같이 실험용 리스트를 하나 만들어 보겠습니다. 0부터 9까지 10개의 정수로 채워진 리스트이죠. 리스트 속 각 인덱스 위치에는 인덱스와 동일한 정수 값이 들어 있는 형태입니다. <code class="highlighter-rouge">a[i] = [i]</code>인 형태 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = list(range(10))
print(a) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre></div></div>

<p>이 리스트의 인덱스로 음의 값을 주면 어떻게 될까요? C를 생각하면 <code class="highlighter-rouge">a[0]</code>의 주소값 이전의 메모리 영역을 가리키게 되겠죠. Python에서는 그렇지 않습니다. 음의 값인 -n으로 인덱싱을 하면 뒤에서 n번째 요소를 가리키는 셈이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-1], a[-2]) # 9 8
</code></pre></div></div>

<p>위를 보시면 <code class="highlighter-rouge">a[-1]</code>은 뒤에서 1번째 요소인 9를, <code class="highlighter-rouge">a[-2]</code>는 뒤에서 2번째 요소인 8을 가리키는 사실을 볼 수 있습니다.
이를 응용해 음의 값으로 슬라이싱을 할 수도 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[-2:]) # [8, 9]
print(a[:-2]) # [0, 1, 2, 3, 4, 5, 6, 7]
print(a[-3:-1]) # [7, 8]
</code></pre></div></div>

<p>위를 보건대, <code class="highlighter-rouge">a[-2:]</code>는 뒤에서 2번째 요소인 8부터 마지막 요소인 9까지를 슬라이싱하고 <code class="highlighter-rouge">a[:-2]</code>는 처음 요소부터 뒤에서 2번째 요소인 8까지 슬라이싱하되 8은 결과에 포함하지 않습니다. 원래 Python 리스트를 <code class="highlighter-rouge">a[start:stop]</code>과 같이 슬라이싱할 때 <code class="highlighter-rouge">stop</code> 위치에 해당하는 요소는 미포함(exclusive)하지요.</p>

<p>리스트 슬라이싱의 <code class="highlighter-rouge">stride</code>에도 음의 값을 넣을 수 있습니다. <code class="highlighter-rouge">a[start:stop:stride]</code>와 같이 슬라이싱할 때, <code class="highlighter-rouge">stride</code>는 요소를 취하는 빈도를 나타냅니다. <code class="highlighter-rouge">stride</code>가 2라면 하나 건너 하나를 취하겠죠. 아래처럼 말이죠.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::2]) # [0, 2, 4, 6, 8]
</code></pre></div></div>

<p><code class="highlighter-rouge">stride</code>를 음의 값으로 하면 리스트가 역방향으로 슬라이싱됩니다. 이를 이용해 리스트의 역순 정렬(reverse sorting)도 할 수 있습니다. 아래의 <code class="highlighter-rouge">a[-1:-3:-1]</code>을 같이 보실까요? 뒤에서 1번째 요소인 9부터 뒤에서 3번째 요소인 7까지 슬리이싱하되 7은 결과에 포함하지 않겠지요? 따라서 결과가 <code class="highlighter-rouge">[9, 8]</code>이 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(a[::-1]) # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
print(a[-1:-3:-1]) # [9, 8]
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
