<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>emilkwak.github.io/</title>
   
   <link>http://0.0.0.0:7070</link>
   <description>Python, Pandas를 Excel보다 사랑하는 직장인을 위한 블로그 </description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>ast.literal_eval()로 문자열(str) 속 표현식(expression) 인식하기</title>
	  <link>//literal-eval-str-expression</link>
	  <author></author>
	  <pubDate>2020-02-02T07:00:00+09:00</pubDate>
	  <guid>//literal-eval-str-expression</guid>
	  <description><![CDATA[
	     <p>#</p>

<p>가만히 보면 Python 표현식(expression statement)도 문자열(str)입니다. 좀 애매한 말이지요? 예를 들어 <code class="highlighter-rouge">a = 1 + 2</code>라는 구문(statement)가 있을 때 ‘1 더하기 2’를 나타낸 우변도 결국 <code class="highlighter-rouge">'1 + 2'</code> 형태의 문자열이라는 것이지요.</p>

<p>Python 작업을 하다 보면 이렇게 문자열에 담겨 있는 표현식을 꺼내 써야 할 때가 종종 있습니다. 메모리에 있는 중간 처리 결과를 문자열로 출력한 후 메모장 같은 곳에 저장해 두었다가 나중에 쓰기도 합니다. 리스트(list) 표현식을 통째로 문자열로 메모해 두었다가 쓸 일도 많구요.</p>

<p>가령, 동창회 멤버 10명의 생년월일 데이터를 자주 사용하는 모임 총무가 있다고 칩시다. 길이(len)가 고작 10이고 각 요소(element)도 8자리 정수(int)인 자그마한 데이터를 굳이 <code class="highlighter-rouge">pickle</code> 같은 것을 사용해 보관할 필요는 없습니다.(오히려 번거롭지요.)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">birth_day_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">'19950415'</span><span class="p">,</span> <span class="s">'19950527'</span><span class="p">,</span> <span class="s">'19951103'</span><span class="p">,</span> <span class="s">'19950606'</span><span class="p">,</span> <span class="s">'19950717'</span><span class="p">,</span> <span class="s">'19950327'</span><span class="p">,</span> <span class="s">'19951030'</span><span class="p">,</span> <span class="s">'19950424'</span><span class="p">,</span> <span class="s">'19950815'</span><span class="p">,</span> <span class="s">'19950901'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">birth_day_list</span><span class="p">))</span> <span class="c"># 10</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">birth_day_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="c"># 8</span>
</code></pre></div></div>
<p>대신 이 정도의 데이터는 Python 표현식 모양 그대로 메모장이나 클라우드 노트(Evernote, OneNote 따위)에 저장해 놓았다가 복사/붙여넣기로 다시 가져다 씁니다. 그런데 이렇게 문자열로 메모해 놓은 표현식이 한두 개면 몰라도 개수가 많아지면 매번 복사/붙여넣기 식으로 하기 번거로워집니다.</p>

<p>그렇다면 문자열로 기록된 표현식들을 일괄로 읽어 들여 와 Python 문자열 변수로 만들고 이를 이용해 원래의 Python 데이터를 얻어 내는 방법이 있을까요? 표현식의 일괄 읽기는 그렇게 어렵지 않습니다. <code class="highlighter-rouge">open()</code>과 <code class="highlighter-rouge">read()</code>, <code class="highlighter-rouge">readlines()</code> 등을 적절히 써 주면 됩니다. 관건은 ‘문자열 변수에 할당된 표현식으로부터 원래의 데이터를 얻는 방법’에 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_in_str</span> <span class="o">=</span> <span class="s">'[1, 2, 3, 4, 5]'</span>
<span class="n">list_data</span> <span class="o">=</span> <span class="n">list_in_str</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">list_data</span><span class="p">))</span> <span class="c"># str - wrong solution</span>
</code></pre></div></div>
<p>위 방법은 <code class="highlighter-rouge">list_in_str</code>을 그대로 재할당하는 작업일 뿐입니다. 그러면 어떻게 해야 <code class="highlighter-rouge">list_in_str</code>에 내포된 데이터를 복구해 낼 수 있을까요? <code class="highlighter-rouge">ast.literal_eval()</code>을 사용하는 것입니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ast</span>
<span class="n">list_in_str</span> <span class="o">=</span> <span class="s">'[1, 2, 3, 4, 5]'</span>
<span class="n">list_data</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">list_in_str</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">list_data</span><span class="p">))</span> <span class="c"># list - correct solution</span>
</code></pre></div></div>
<p>아래처럼 딕셔너리(dict)도 동일한 방법으로 처리가 가능합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ast</span>
<span class="n">list_in_str</span> <span class="o">=</span> <span class="s">"{'a': 1, 'b': 2, 'c': 3}"</span>
<span class="n">list_data</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">list_in_str</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">list_data</span><span class="p">))</span> <span class="c"># dict</span>
</code></pre></div></div>
<p>사실 <code class="highlighter-rouge">eval()</code>이라는 내장(built-in) 함수가 있습니다. 그렇지만 이 함수는 악용될 소지가 커 가급적 사용을 자제해야 합니다.(참고: <a href="https://bluese05.tistory.com/64">python eval() 함수 - 사용을 조심해야 하는 이유</a>)</p>

<p>한편, <code class="highlighter-rouge">ast.literal_eval()</code>은 위에서 우리가 하려고 했던 목적을 이루게 해 주면서도, 안전성을 보장합니다. 정확히 이야기하자면, 인자(parameter)로 주어진 표현식을 실행하기 전에 그것이 ‘수상한 표현식’인지 아닌지 먼저 검증합니다.</p>

<p><code class="highlighter-rouge">ast.listeral_eval()</code>은 이처럼 안전한 대신 인자로, 제한된 리터럴(literal)로 구성된 표현식만 허용합니다. 즉, 다음과 같은 리터럴들만 표현식에 등장할 수 있다는 뜻이죠.</p>

<blockquote>
  <p>문자열, 바이트, 수, 튜플, 리스트, 딕셔너리, 셋, 불리언, None
(참고: <a href="https://docs.python.org/3/library/ast.html">ast — Abstract Syntax Trees</a>)</p>
</blockquote>

<p><code class="highlighter-rouge">eval()</code>이 내장 함수이기도 하고 Python이 아닌 다른 언어에도 보통 등장하는 기능이라, 무심코 사용하는 경향이 있습니다. 물론 개인적인 용도로 사용할 프로그램이거나 믿을 수 있는 사용자들만 사용할 프로그램이라면 괜찮겠으나, 믿을 수 있는 그룹이 아닌 불특정 다수 그룹이 사용할 것이라면, <code class="highlighter-rouge">eval()</code>의 사용을 최소한으로 하고 <code class="highlighter-rouge">ast.literal_eval()</code>과 같은 대체 기능을 사용해야 합니다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
