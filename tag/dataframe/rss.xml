<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>emilkwak.github.io/</title>
   
   <link>http://0.0.0.0:7070</link>
   <description>Python, Pandas를 Excel보다 사랑하는 직장인을 위한 블로그 </description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>데이터프레임(DataFrame) 인덱싱(indexing), 셀렉팅(selecting)한 상태에서 값 수정하기(loc[] 사용)</title>
	  <link>//dataframe-update-after-indexing-selecting</link>
	  <author></author>
	  <pubDate>2020-02-03T08:00:00+09:00</pubDate>
	  <guid>//dataframe-update-after-indexing-selecting</guid>
	  <description><![CDATA[
	     <p><code class="highlighter-rouge">pandas</code>를 사용하다 보면 <code class="highlighter-rouge">DataFrame</code>의 일부 행과 일부 열에 대해서만 부분적으로 수정을 가해야 할 때가 생깁니다. 인덱싱(indexing)과 셀렉팅(selecting)을 통해 수정을 가할 부분을 어떻게든 찾은 다음에, 어떤 방법을 써야 실제적인 수정이 이뤄지는지 알아 보겠습니다.</p>

<p>선 다음과 같은 샘플 데이터셋을 통해 <code class="highlighter-rouge">DataFrame</code>을 만들어 보겠습니다. Forbes가 발표한 2019년 미국 최우수 대학교 순위 자료입니다. 1위부터 10위까지만 추렸고 4개의 헤더(<code class="highlighter-rouge">RANK</code>, <code class="highlighter-rouge">NAME</code>, <code class="highlighter-rouge">STATE</code>, <code class="highlighter-rouge">SALARY</code>)는 각각 순위, 대학교명, 소재주, 평균초봉에 해당합니다.
(참고: <a href="https://www.forbes.com/top-colleges/#53e27aed1987">[Forbes] America’s Top Colleges 2019</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s">'RANK'</span><span class="p">,</span> <span class="s">'NAME'</span><span class="p">,</span> <span class="s">'STATE'</span><span class="p">,</span> <span class="s">'SALARY'</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span>\
<span class="p">[[</span><span class="s">'1'</span><span class="p">,</span> <span class="s">'Harvard University'</span><span class="p">,</span> <span class="s">'Massachusetts'</span><span class="p">,</span> <span class="s">'74800'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'2'</span><span class="p">,</span> <span class="s">'Stanford University'</span><span class="p">,</span> <span class="s">'California'</span><span class="p">,</span> <span class="s">'79000'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'3'</span><span class="p">,</span> <span class="s">'Yale University'</span><span class="p">,</span> <span class="s">'Connecticut'</span><span class="p">,</span> <span class="s">'70300'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'4'</span><span class="p">,</span> <span class="s">'Massachusetts Institute of Technology'</span><span class="p">,</span> <span class="s">'Massachusetts'</span><span class="p">,</span> <span class="s">'86300'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'5'</span><span class="p">,</span> <span class="s">'Princeton University'</span><span class="p">,</span> <span class="s">'New Jersey'</span><span class="p">,</span> <span class="s">'75200'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'6'</span><span class="p">,</span> <span class="s">'University of Pennsylvania'</span><span class="p">,</span> <span class="s">'Pennsylvania'</span><span class="p">,</span> <span class="s">'72800'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'7'</span><span class="p">,</span> <span class="s">'Brown University'</span><span class="p">,</span> <span class="s">'Rhode Island'</span><span class="p">,</span> <span class="s">'68200'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'8'</span><span class="p">,</span> <span class="s">'California Institute of Technology'</span><span class="p">,</span> <span class="s">'California'</span><span class="p">,</span> <span class="s">'84100'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'9'</span><span class="p">,</span> <span class="s">'Duke University'</span><span class="p">,</span> <span class="s">'North Carolina'</span><span class="p">,</span> <span class="s">'71100'</span><span class="p">],</span>
 <span class="p">[</span><span class="s">'10'</span><span class="p">,</span> <span class="s">'Dartmouth College'</span><span class="p">,</span> <span class="s">'New Hampshire'</span><span class="p">,</span> <span class="s">'71500'</span><span class="p">]]</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">header</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">SALARY</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">SALARY</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>
<p>위 <code class="highlighter-rouge">df</code> 변수에 완성된 데이터가 들어가 있습니다. 어떻게 생긴 데이터인지 한번 볼까요?</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="s">'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	California	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	California	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">STATE</code>가 캘리포니아(California)인 것만 찾아 그 <code class="highlighter-rouge">STATE</code> CALIFORNIA로 변경해 보겠습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">STATE</span> <span class="o">==</span> <span class="s">'California'</span><span class="p">]</span><span class="o">.</span><span class="n">STATE</span> <span class="o">=</span> <span class="s">'CALIFORNIA'</span>
<span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="s">'''
/usr/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:5208: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  self[name] = value
  
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	California	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	California	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">SettingWithCopyWarning</code>이 발생했고 변경하려 했던 <code class="highlighter-rouge">df</code>의 부분도 바뀌지 않고 그대로 있습니다. 우리가 했던 변경 작업이 <code class="highlighter-rouge">df</code> 원본이 아니라 그것을 복사(copy)한 후 변경 처리한 결과라는 것입니다. 당연히 원본인 <code class="highlighter-rouge">df</code>는 아무런 영향을 받지 않은 것이고요.</p>

<p>그러면 어떻게 해야 할까요? 다음과 같이 <code class="highlighter-rouge">loc[]</code>와 <code class="highlighter-rouge">mask</code>를 이용한 방법이 가장 깔끔합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mask = df.STATE == 'California'
df.loc[mask, 'STATE'] = 'CALIFORNIA'
display(df)
'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	CALIFORNIA	79000
2	3	Yale University	Connecticut	70300
3	4	Massachusetts Institute of Technology	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	California Institute of Technology	CALIFORNIA	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''
</code></pre></div></div>
<p><code class="highlighter-rouge">STATE</code> 열을 보면 california였던 것이 모두 CALIFORNIA로 바뀌었습니다. 마찬가지 방법으로, 조금 더 복잡한 작업을 해 보시죠. 평균초봉이 80000 이상이면 대학교명을 모두 대문자 처리하는 코드를 작성해 보겠습니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mask = df.SALARY &gt; 80000
df.loc[mask, 'NAME'] = df[mask].NAME.str.upper()
display(df)
'''
	RANK	NAME	STATE	SALARY
0	1	Harvard University	Massachusetts	74800
1	2	Stanford University	CALIFORNIA	79000
2	3	Yale University	Connecticut	70300
3	4	MASSACHUSETTS INSTITUTE OF TECHNOLOGY	Massachusetts	86300
4	5	Princeton University	New Jersey	75200
5	6	University of Pennsylvania	Pennsylvania	72800
6	7	Brown University	Rhode Island	68200
7	8	CALIFORNIA INSTITUTE OF TECHNOLOGY	CALIFORNIA	84100
8	9	Duke University	North Carolina	71100
9	10	Dartmouth College	New Hampshire	71500
'''
</code></pre></div></div>
<p>평균초봉이 86300인 MIT와 84100인 CALTECH, 두 군데의 학교명이 대문자 처리되었습니다. 세계적인 공과대학 두 곳인데, 역시 대단하군요.</p>

<p><code class="highlighter-rouge">DataFrame</code>을 인덱싱, 셀렉팅할 경우 원래의 <code class="highlighter-rouge">DataFrame</code>이 아닌 그것의 복사본을 생성해 반환하게 됩니다. 따라서 그것에 수정을 가해도 원본이 바뀌지는 않는 것입니다. 한편, <code class="highlighter-rouge">mask</code>와 <code class="highlighter-rouge">loc[]</code>을 이용하면 복사본을 생성하지 않고 원본을 유지하고 수정도 원본에 직접 가할 수 있습니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Pandas의 DataFrame 사용 중 SettingWithCopyWarning 발생할 때</title>
	  <link>//pandas-dataframe-settingwithcopywarning</link>
	  <author></author>
	  <pubDate>2019-07-09T08:00:00+09:00</pubDate>
	  <guid>//pandas-dataframe-settingwithcopywarning</guid>
	  <description><![CDATA[
	     <p>Python의 Pandas 라이브러리 사용자에게 DataFrame은 매우 중요한 도구입니다. R 언어의 데이터프레임을 대체하기 위해 고안된 Pandas DataFrame은 이제 R을 훨씬 뛰어넘어 데이터 처리의 절대적인 도구로서 위치를 점하고 있습니다.</p>

<p>Pandas DataFrame은 R 언어의 관련 기능을 상당수를 대체한 것에 모자라, 커서(cursor)로 처리하는 고수준(high-level) 프로그래밍 언어에서의 SQL 처리와 PL/SQL을 대체했습니다. 최근에는 Excel 등 스프레드시트(spreadsheet)의 기능도 대체하기 시작했고요.</p>

<p>원천 자료에 일차 데이터 처리가 반영된 이차 자료를 만들고 계속적 처리를 통해 n차 자료를 만들면서, 여러 n차 자료들을 분석과 추론으로 엮어 통찰(insight)를 얻어 내는 일은 데이터 분석의 기본이자 핵심입니다.</p>

<p>이 과정에서 DataFrame을 SELECT하고(row 관점의 filtering) PROJECT하여(column 관점의 filtering) 가공된 파생 DataFrame을 만들고, 여기에 다시 연산을 가해 분석적 통찰이 반영된 DataFrame을 만듭니다. 이와 같은 과정이 여러 번 반복되지요.</p>

<p>파생된 DataFrame을 분석해 발견한 데이터를 그 DataFrame에 열(column)로서 추가하는 일 또한 자주 사용될 것입니다. 그런데 DataFrame에 열을 추가하는 과정에서 Pandas 자체에서 발생시키는 경고(warning) 메시지를 몇 번 본 적 있을 것이입니다. SettingWithCopyWarning라는 이름의 경고 말이죠.</p>

<p>이 경고가 어떤 상황에 발생하는지 원리를 이해하여 런타임 전에 미리 예방할 수 있다면 번거로움이 줄어들 것입니다. 어떤 경우에 발생할까요? 원천이 되는 DataFrame의 일부로 구성된 파생 DataFrame에 변경을 가하는 경우 발생합니다. 쉬운 예제로 SettingWithCopyWarning의 발생을 재현할 수 있지요. 아래처럼요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span><span class="p">,</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">nums</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
<span class="c"># [-9 -3  5  9  7 -6 -2  4 -5  6]</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'NUM'</span><span class="p">])</span>
<span class="c">#    NUM</span>
<span class="c"># 0   -9</span>
<span class="c"># 1   -3</span>
<span class="c"># 2    5</span>
<span class="c"># 3    9</span>
<span class="c"># 4    7</span>
<span class="c"># 5   -6</span>
<span class="c"># 6   -2</span>
<span class="c"># 7    4</span>
<span class="c"># 8   -5</span>
<span class="c"># 9    6</span>

<span class="n">df_positive</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">NUM</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">df_positive</span><span class="p">[</span><span class="s">'SQUARED'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_positive</span><span class="o">.</span><span class="n">NUM</span> <span class="o">**</span> <span class="mi">2</span>
<span class="c"># SettingWithCopyWarning: </span>
<span class="c"># A value is trying to be set on a copy of a slice from a DataFrame.</span>
<span class="c"># Try using .loc[row_indexer,col_indexer] = value instead</span>
<span class="c"># </span>
<span class="c"># See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy</span>

<span class="k">print</span><span class="p">(</span><span class="n">df_positive</span><span class="p">)</span>
<span class="c">#    NUM  SQUARED</span>
<span class="c"># 2    5       25</span>
<span class="c"># 3    9       81</span>
<span class="c"># 4    7       49</span>
<span class="c"># 7    4       16</span>
<span class="c"># 9    6       36</span>
</code></pre></div></div>

<p>왜 이런 경고를 발생시킬까요? 번거롭기만 하고 별 이득은 없는 validation인 것 같은데 말이지요. 그렇지 않습니다. 매우 중요한 역할을 하는 경고입니다. Pandas DataFrame은 연쇄적인(chained) 연산과 처리를 허용합니다. SQL에서 테이블을 SELECT한 결과가 다시 테이블이 되어 다시 SELECT할 수 있는 것과 유사하게, DataFrame도 그런 성질을 띱니다. 이것이 관계형 데이터베이스의 closure에 해당하는 개념인 것이죠.</p>

<p>한편 DataFrame도 자료구조(data structure)인 셈이므로 이를  표현하기 위해 메모리를 점유합니다. 등장하는 모든 DataFrame에 메모리를 할당하려 들면 금방 바닥을 보이게 되겠지요. Pandas에서는 원천 DataFrame을 생성할 때만 메모리를 할당하고 이로부터 파생되는 DataFrame은 원천 DataFrame을 이미 적재된 메모리에 접근케 하며 이로 인해 메모리를 절약합니다. 원천 DataFrame의 부분집합(subset)에 view를 형성한다 보면 됩니다.</p>

<p>파생된 DataFrame에 열(columns)을 하나 추가하면 어떻게 될까요? 한 DataFrame의 부분집합으로 이뤄진 view에 변경을 가하는 셈이지요. 원천 DataFrame에도 그 열을 붙여 줘야 할까요? 아니면 파생 DataFrame에만 붙이면 될까요? 원천 DataFrame에 그 열을 붙인다면, 파생 DataFrame에서 등장하지 않은 행(row)들에도 무언가를 붙여야 할까요, 말아야 할까요? 붙인다면 None으로 채워야 할까요?</p>

<p>이런 복잡한 질문에는 정답이 없습니다. 실제 개발하는 사람의 의도에 따라 원하는 바가 다를 수 밖에 없습니다. Pandas에서는 파생 DataFrame에 수정을 가하는 것을 권장하지 않습니다.(그래서 경고를 띄우는 것이죠.) 대신 Pandas는 copy() 메서드를 통해 파생 DataFrame에 독립적인 메모리를 부여한 뒤 여기에 수정을 가하도록 유도하지요. view를  실질화(materialization)시키는 것이죠.</p>

<p>요컨대 SettingWithCopyWarning의 발생을 예방하기 위한 가장 쉬운 방법은 파생 DataFrame에 copy() 메서드를 실행해, 원천 DataFrame과 별도인 메모리 공간을 파생 DataFrame에 부여하는 것입니다. 원천과 파생이 완전히 갈라서는 것이지요. 위에서 던졌던 복잡하고 귀찮은 질문들은 대답할 필요가 없게 되는 것이죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># with SettingWithCopyWarning</span>
<span class="n">df_positive</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">NUM</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">df_positive</span><span class="p">[</span><span class="s">'SQUARED'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_positive</span><span class="o">.</span><span class="n">NUM</span> <span class="o">**</span> <span class="mi">2</span>
<span class="c"># SettingWithCopyWarning: </span>
<span class="c"># A value is trying to be set on a copy of a slice from a DataFrame.</span>
<span class="c"># Try using .loc[row_indexer,col_indexer] = value instead</span>
<span class="c"># </span>
<span class="c"># See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy</span>

<span class="c"># without SettingWithCopyWarning</span>
<span class="n">df_positive</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">NUM</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">df_positive</span><span class="p">[</span><span class="s">'SQUARED'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_positive</span><span class="o">.</span><span class="n">NUM</span> <span class="o">**</span> <span class="mi">2</span>

<span class="k">print</span><span class="p">(</span><span class="n">df_positive</span><span class="p">)</span>
<span class="c">#    NUM  SQUARED</span>
<span class="c"># 2    5       25</span>
<span class="c"># 3    9       81</span>
<span class="c"># 4    7       49</span>
<span class="c"># 7    4       16</span>
<span class="c"># 9    6       36</span>
</code></pre></div></div>

<p>물론 이 경우 파생 DataFrame에 메모리가 부여되므로 사용 가능한 총 메모리는 줄어들게 됩니다. 이를 잘 감안해 사용해야 합니다. copy()를 막 하다 보면 어느순간 메모리가 바닥나는 상황도 생길 수 있으니까요.</p>

<p>어쨌든 SettingWithCopyWarning은 의도치 않은 구현을 경고하는 중요한 장치입니다. 경고를 무시하고 개발해도 원하는 처리가 당장 된다고 해서 SettingWithCopyWarning을 무시하는 것보다는, SettingWithCopyWarning가 발생하지 않는 방식으로 개발하는 습관이 중요합니다.</p>


	  ]]></description>
	</item>

	<item>
	  <title>메모리 덜 쓰고 Pandas DataFrame 병합을 빠르게 하는 방법(여러 개의 용량 큰 파일)</title>
	  <link>//pandas-dataframe-concat-efficiently</link>
	  <author></author>
	  <pubDate>2019-01-15T07:00:00+09:00</pubDate>
	  <guid>//pandas-dataframe-concat-efficiently</guid>
	  <description><![CDATA[
	     <p>여러 개의 Excel 파일(또는 csv, pickle 등)로부터 같은 형태의 DataFrame을 차례로 읽어 들여 하나의 큰 DataFrame으로 합치려 한다고 합시다. 각 Excel 파일의 DataFrame의 컬럼 목록은 모두 같다고 하죠. 실제 사례를 상상해 보면, 날짜별, 시간별 로그 데이터가 파일 형태로 저장되어 있는 경우를 생각해 볼 수 있겠네요.</p>

<p>가장 먼저 떠오르는 방법은 아래처럼 빈 DataFrame을 선언한 후 For Loop으로 각 파일을 읽어 붙이는 형태가 되겠습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 권장하지 않는 사례
import pandas as pd, os

base_dir = 'some/dir/path'

df_accum = pd.DataFrame() # 빈 DataFrame을 만듦.
for fname in os.listdir(base_dir):
    df_temp = pd.read_excel(os.path.join(base_dir, fname))
    df_accum = df_accum.append(df_temp) # 매 Loop에서 취해진 DataFrame을 앞서 정의한 빈 DataFrame에 붙임.
</code></pre></div></div>

<p>그러나 이 방법은 다음의 두 가지 이유에서 좋지 않습니다.</p>

<ol>
  <li>메모리를 많이 씁니다. <code class="highlighter-rouge">df_accum</code>은 점점 몸집이 커져 갑니다. Loop마다 커지는 몸집에 <code class="highlighter-rouge">df_temp</code>를 붙이는 작업은 메모리 사용 차원에서 비효율적입니다.</li>
  <li>속도가 느립니다. 크기가 큰 DataFrame을 <code class="highlighter-rouge">append()</code>하는 것보다 작은 것을 하는 게 더 빠를 것입니다. 그런 차원에서 몸집이 커져 가는 <code class="highlighter-rouge">df_accum</code>은 느린 속도의 주범입니다.</li>
</ol>

<p>실제로 pickle 기준으로 총 크기가 4.5GB인 데이터를 위와 같이 처리해 보면 속도가 매우 느린데다가 자칫하면 메모리 부족 오류(MemoryError)를 보게 되기도 합니다.(Windows 64-bit에 8GB RAM을 사용한다 하더라도 말이죠.)</p>

<p>메모리 효율성 차원에서는 사실 뾰족한 답이 없습니다. 다만, ‘조금이라도 메모리를 덜 낭비’하면서 속도는 훨씬 빨리 할 수 있는 방법이 있습니다. 아래처럼 For Loop에서 등장하는 DataFrame을 list에 담아 두고 마지막에 list 통째로 <code class="highlighter-rouge">pd.concat()</code>에 넣어 병합하는 방법입니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 권장하는 사례
import pandas as pd, os

base_dir = 'some/dir/path'

list_of_df = [] # 빈 list를 만듦.
for fname in os.listdir(base_dir):
    df_temp = pd.read_excel(os.path.join(base_dir, fname))
    list_of_df.append(df_temp) # 매 Loop에서 취해진 DataFrame을 위의 list에 적재함.
df_accum = pd.concat(list_of_df) # list 속 DataFrame들을 일괄 병합함.
</code></pre></div></div>

<p>말씀드린 것처럼 메모리 효율성을 급격하게 높일 수는 없겠지만, 속도 향상은 확실히 느낄 수 있을 것입니다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
